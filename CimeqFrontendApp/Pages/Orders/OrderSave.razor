@page "/orders/new"
@page "/order/{id}/edit"
@using System.Net.Http.Headers
@using Newtonsoft.Json;
@using System.Text;
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <h3>Order: @order.Description</h3>
    <form @onsubmit="SaveOrder">
        <div class="form-group mb-3">
            <label for="description">Description</label>
            <input type="text" class="form-control" placeholder="Description" id="description" @bind="order.Description" required />
        </div>
        <div class="form-group mb-3">
            <label for="clientId">Client</label>
            <select class="form-control" id="clientId" @bind="order.IdClient" required>
                <option value="0">Select a client</option>
                @foreach (var client in clients)
                {
                    <option value="@client.Id">@client.Username @client.LastName</option>
                }
            </select>
        </div>
        <div class="form-group mb-3">
            <label for="dateOrder">Date Order</label>
            <input type="text" class="form-control" placeholder="Date Order" id="dateOrder" @bind="order.DateOrder" required />
        </div>
        <div class="form-group mb-3">
            <label for="costOrder">Cost Order $</label>
            <input type="text" class="form-control" placeholder="Cost Order" id="costOrder" @bind="order.CostOrder" required />
        </div>
        <div class="form-group mb-3">
            <button type="submit" class="btn btn-outline-success">Save</button>
            <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </form>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private int id { get { return Convert.ToInt32(Id); } }

    private List<ClientModel> clients = new List<ClientModel>(); // Replace with your actual client list

    protected override async Task OnInitializedAsync()
    {
        var token = await GetTokenFromCookie();
        if (!string.IsNullOrEmpty(token))
        {
            if (id > 0)
                await LoadOrderById(id, token);

            await LoadClients(token);
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task LoadOrderById(int id, string token)
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync($"/orders/{id}");

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            order = JsonConvert.DeserializeObject<OrderModel>(jsonResponse);
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/orders");
        }
    }

    private async Task LoadClients(string token)
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync("/clients");

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            clients = JsonConvert.DeserializeObject<List<ClientModel>>(jsonResponse);
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private OrderModel order = new OrderModel();

    private async Task SaveOrder()
    {
        var token = await GetTokenFromCookie();
        if (!string.IsNullOrEmpty(token))
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var content = new StringContent(JsonConvert.SerializeObject(order), Encoding.UTF8, "application/json");
            HttpResponseMessage response = null;

            if (id < 1)
                response = await httpClient.PostAsync("/orders", content);
            else
                response = await httpClient.PutAsync("/orders/" + id, content);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/orders");
            }
            else
            {
                ShowAlert("Failed to save order");
            }
        }
        else
        {
            ShowAlert("Invalid token. Log in again.");
            NavigationManager.NavigateTo("/");
        }
    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/orders");
    }

    private async Task<string> GetTokenFromCookie()
    {
        return await JSRuntime.InvokeAsync<string>("getCookie", "token");
    }

    private void ShowAlert(string message)
    {
        JSRuntime.InvokeVoidAsync("alert", message);
    }

    public class OrderModel
    {
        public int Id { get; set; }
        public int IdClient { get; set; }
        public string Description { get; set; }
        public DateTime DateOrder { get; set; }
        public double CostOrder { get; set; }
    }

    public class ClientModel
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string LastName { get; set; }
    }
}
